#!/usr/bin/env node

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  CARDS_DIR: path.join(__dirname, '../assets/cards'),
  PRODUCTS_OUTPUT: path.join(__dirname, '../data/products.json'),
  FAVORITES_OUTPUT: path.join(__dirname, '../data/favorites.json'),
  SUPPORTED_EXTENSIONS: ['.jpg', '.jpeg', '.png', '.webp', '.gif'],
  MAX_FILE_SIZE: 20 * 1024 * 1024, // 20MB
  MAX_FAVORITES: 10,
  MAX_TITLE_LENGTH: 70
};

// –£—Ç–∏–ª–∏—Ç—ã
function kebabCase(str) {
  return str
    .replace(/[^a-zA-Z0-9\s-]/g, '') // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    .replace(/[\s_-]+/g, '-') // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    .replace(/^-+|-+$/g, '') // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    .toLowerCase();
}

function extractPrice(filename) {
  const priceMatch = filename.match(/_(\d+(?:\.\d+)?)(?:usd|dollars?|—Ä—É–±|‚ÇΩ)?/i);
  return priceMatch ? parseFloat(priceMatch[1]) : null;
}

function formatTitle(filename) {
  return filename
    .replace(/[_-]/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    .replace(/\s+/g, ' ') // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    .trim()
    .substring(0, CONFIG.MAX_TITLE_LENGTH);
}

function getTagsFromPath(filePath) {
  const relativePath = path.relative(CONFIG.CARDS_DIR, filePath);
  const dirs = path.dirname(relativePath).split(path.sep);
  
  return dirs
    .filter(dir => dir && !dir.startsWith('!') && !dir.startsWith('.'))
    .map(dir => dir.toLowerCase());
}

async function getFileStats(filePath) {
  try {
    const stats = await fs.stat(filePath);
    return {
      size: stats.size,
      mtime: stats.mtime,
      isFile: stats.isFile()
    };
  } catch (error) {
    console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è ${filePath}:`, error.message);
    return null;
  }
}

async function scanCardsDirectory() {
  const products = [];
  const favorites = [];
  
  console.log(`üîç –°–∫–∞–Ω–∏—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${CONFIG.CARDS_DIR}`);
  
  try {
    await scanDirectory(CONFIG.CARDS_DIR, '', products, favorites);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:`, error.message);
    process.exit(1);
  }
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${products.length}`);
  console.log(`‚≠ê –§–∞–≤–æ—Ä–∏—Ç–æ–≤: ${favorites.length}`);
  
  return { products, favorites };
}

async function scanDirectory(dirPath, relativePath, products, favorites) {
  try {
    const entries = await fs.readdir(dirPath, { withFileTypes: true });
    
    for (const entry of entries) {
      const fullPath = path.join(dirPath, entry.name);
      const entryRelativePath = path.join(relativePath, entry.name);
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
      if (entry.name.startsWith('.')) {
        continue;
      }
      
      if (entry.isDirectory()) {
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        await scanDirectory(fullPath, entryRelativePath, products, favorites);
      } else if (entry.isFile()) {
        await processFile(fullPath, entryRelativePath, products, favorites);
      }
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dirPath}:`, error.message);
  }
}

async function processFile(filePath, relativePath, products, favorites) {
  const ext = path.extname(filePath).toLowerCase();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
  if (!CONFIG.SUPPORTED_EXTENSIONS.includes(ext)) {
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–∞
  const stats = await getFileStats(filePath);
  if (!stats || !stats.isFile) {
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
  if (stats.size > CONFIG.MAX_FILE_SIZE) {
    console.warn(`‚ö†Ô∏è  –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${(stats.size / 1024 / 1024).toFixed(1)}MB): ${relativePath}`);
    return;
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
  const filename = path.basename(filePath, ext);
  const id = kebabCase(filename);
  const title = formatTitle(filename);
  const price = extractPrice(filename);
  const imageUrl = `./assets/cards/${relativePath.replace(/\\/g, '/')}`;
  const tags = getTagsFromPath(filePath);
  const createdAt = stats.mtime.toISOString();
  
  const product = {
    id,
    title,
    price,
    imageUrl,
    tags,
    createdAt
  };
  
  products.push(product);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ñ–∞–≤–æ—Ä–∏—Ç–æ–º
  if (relativePath.includes('!favorite')) {
    favorites.push({
      id,
      createdAt
    });
  }
}

function sortProducts(products) {
  return products.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
}

function sortFavorites(favorites) {
  return favorites
    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
    .slice(0, CONFIG.MAX_FAVORITES)
    .map(fav => fav.id);
}

async function updateServiceWorkerVersion() {
  const swPath = path.join(__dirname, '../sw.js');
  
  try {
    let content = await fs.readFile(swPath, 'utf8');
    
    // –ò—â–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    const versionMatch = content.match(/const VERSION = 'v(\d+)'/);
    if (versionMatch) {
      const currentVersion = parseInt(versionMatch[1]);
      const newVersion = currentVersion + 1;
      
      content = content.replace(
        /const VERSION = 'v\d+'/,
        `const VERSION = 'v${newVersion}'`
      );
      
      await fs.writeFile(swPath, content, 'utf8');
      console.log(`üîÑ Service Worker –≤–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: v${currentVersion} ‚Üí v${newVersion}`);
    } else {
      console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ VERSION –≤ sw.js');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Service Worker:', error.message);
  }
}

async function writeOutputFiles(products, favorites) {
  try {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    const sortedProducts = sortProducts(products);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–≤–æ—Ä–∏—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const sortedFavorites = sortFavorites(favorites);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const productsData = {
      items: sortedProducts
    };
    
    const favoritesData = {
      items: sortedFavorites
    };
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    await fs.writeFile(
      CONFIG.PRODUCTS_OUTPUT,
      JSON.stringify(productsData, null, 2),
      'utf8'
    );
    
    await fs.writeFile(
      CONFIG.FAVORITES_OUTPUT,
      JSON.stringify(favoritesData, null, 2),
      'utf8'
    );
    
    console.log(`‚úÖ ${CONFIG.PRODUCTS_OUTPUT} –æ–±–Ω–æ–≤–ª–µ–Ω (${sortedProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤)`);
    console.log(`‚úÖ ${CONFIG.FAVORITES_OUTPUT} –æ–±–Ω–æ–≤–ª–µ–Ω (${sortedFavorites.length} —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤)`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é Service Worker
    await updateServiceWorkerVersion();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–æ–≤:', error.message);
    process.exit(1);
  }
}

async function validateOutputFiles() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–∞–ª–∏–¥–Ω—ã–π JSON
    const productsContent = await fs.readFile(CONFIG.PRODUCTS_OUTPUT, 'utf8');
    const favoritesContent = await fs.readFile(CONFIG.FAVORITES_OUTPUT, 'utf8');
    
    JSON.parse(productsContent);
    JSON.parse(favoritesContent);
    
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è JSON –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON:', error.message);
    process.exit(1);
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞...\n');
  
  try {
    // –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    const { products, favorites } = await scanCardsDirectory();
    
    if (products.length === 0) {
      console.warn('‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    await writeOutputFiles(products, favorites);
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await validateOutputFiles();
    
    console.log('\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
